// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CategoryPublicConcernTrend {
  id                 Int                  @id @default(autoincrement())
  name               String
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  PublicConcernTrend PublicConcernTrend[]
}

model CategoryLeaderTraitAssessment {
  id                    Int                     @id @default(autoincrement())
  name                  String
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  LeaderTraitAssessment LeaderTraitAssessment[]
}

model Component {
  id         Int          @id @default(autoincrement())
  menu       String?
  label      String?
  keyMenu    String?
  name       String
  isActive   Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  UserAccess UserAccess[]
}

model UserRole {
  id         Int          @id @default(autoincrement())
  name       String
  isActive   Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  UserAccess UserAccess[]
  User       User[]
}

model UserAccess {
  id          String    @id @default(cuid())
  idUserRole  Int
  idComponent Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  UserRole    UserRole  @relation(fields: [idUserRole], references: [id])
  Component   Component @relation(fields: [idComponent], references: [id])
}

model User {
  id         String     @id @default(cuid())
  idUserRole Int
  name       String
  email      String     @unique
  password   String
  phone      String // kemungkinan ada 1 orang yang punya akun yg beda namun punya wa yg sama
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  UserRole   UserRole   @relation(fields: [idUserRole], references: [id])
  UserLog    UserLog[]
  UserArea   UserArea[]
}

model UserLog {
  id          String   @id @default(cuid())
  idUser      String
  activity    String
  description String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [idUser], references: [id])
}

model AreaProvinsi {
  id                    Int                     @id @default(autoincrement())
  name                  String
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  AreaKabkot            AreaKabkot[]
  UserArea              UserArea[]
  LeaderTraitAssessment LeaderTraitAssessment[]
  PublicConcernTrend    PublicConcernTrend[]
  RegionHotIssues       RegionHotIssues[]
  Candidate             Candidate[]
  CandidateEmotion      CandidateEmotion[]
  Audience              Audience[]
  CandidatePairing      CandidatePairing[]
}

model AreaKabkot {
  id                    Int                     @id @default(autoincrement())
  idProvinsi            Int
  name                  String
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  AreaProvinsi          AreaProvinsi            @relation(fields: [idProvinsi], references: [id])
  AreaKecamatan         AreaKecamatan[]
  UserArea              UserArea[]
  LeaderTraitAssessment LeaderTraitAssessment[]
  PublicConcernTrend    PublicConcernTrend[]
  RegionHotIssues       RegionHotIssues[]
  Candidate             Candidate[]
  CandidateEmotion      CandidateEmotion[]
  Audience              Audience[]
  CandidatePairing      CandidatePairing[]
}

model AreaKecamatan {
  id                    Int                     @id @default(autoincrement())
  idKabkot              Int
  name                  String
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  AreaKabkot            AreaKabkot              @relation(fields: [idKabkot], references: [id])
  AreaKelurahan         AreaKelurahan[]
  UserArea              UserArea[]
  LeaderTraitAssessment LeaderTraitAssessment[]
  PublicConcernTrend    PublicConcernTrend[]
  RegionHotIssues       RegionHotIssues[]
  CandidateEmotion      CandidateEmotion[]
  Audience              Audience[]
  CandidatePairing      CandidatePairing[]
}

model AreaKelurahan {
  id                    Int                     @id @default(autoincrement())
  idKecamatan           Int
  name                  String
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  AreaKecamatan         AreaKecamatan           @relation(fields: [idKecamatan], references: [id])
  UserArea              UserArea[]
  LeaderTraitAssessment LeaderTraitAssessment[]
  PublicConcernTrend    PublicConcernTrend[]
  RegionHotIssues       RegionHotIssues[]
  CandidateEmotion      CandidateEmotion[]
  Audience              Audience[]
}

model UserArea {
  id            String         @id @default(cuid())
  idUser        String
  idProvinsi    Int?
  idKabkot      Int?
  idKecamatan   Int?
  idKelurahan   Int?
  isAllArea     Boolean        @default(false)
  isFront       Boolean        @default(false)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User           @relation(fields: [idUser], references: [id])
  AreaProvinsi  AreaProvinsi?  @relation(fields: [idProvinsi], references: [id])
  AreaKabkot    AreaKabkot?    @relation(fields: [idKabkot], references: [id])
  AreaKecamatan AreaKecamatan? @relation(fields: [idKecamatan], references: [id])
  AreaKelurahan AreaKelurahan? @relation(fields: [idKelurahan], references: [id])
}

model LeaderTraitAssessment {
  id                            String                        @id @default(cuid())
  idProvinsi                    Int?
  idKabkot                      Int?
  idKecamatan                   Int?
  idKelurahan                   Int?
  idCategory                    Int
  content                       String                        @db.Text
  isActive                      Boolean                       @default(true)
  createdAt                     DateTime                      @default(now())
  updatedAt                     DateTime                      @updatedAt
  AreaProvinsi                  AreaProvinsi?                 @relation(fields: [idProvinsi], references: [id])
  AreaKabkot                    AreaKabkot?                   @relation(fields: [idKabkot], references: [id])
  AreaKecamatan                 AreaKecamatan?                @relation(fields: [idKecamatan], references: [id])
  AreaKelurahan                 AreaKelurahan?                @relation(fields: [idKelurahan], references: [id])
  CategoryLeaderTraitAssessment CategoryLeaderTraitAssessment @relation(fields: [idCategory], references: [id])
}

model PublicConcernTrend {
  id                         String                     @id @default(cuid())
  idProvinsi                 Int?
  idKabkot                   Int?
  idKecamatan                Int?
  idKelurahan                Int?
  idCategory                 Int
  content                    String                     @db.Text
  isActive                   Boolean                    @default(true)
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt
  AreaProvinsi               AreaProvinsi?              @relation(fields: [idProvinsi], references: [id])
  AreaKabkot                 AreaKabkot?                @relation(fields: [idKabkot], references: [id])
  AreaKecamatan              AreaKecamatan?             @relation(fields: [idKecamatan], references: [id])
  AreaKelurahan              AreaKelurahan?             @relation(fields: [idKelurahan], references: [id])
  CategoryPublicConcernTrend CategoryPublicConcernTrend @relation(fields: [idCategory], references: [id])
}

model RegionHotIssues {
  id            String         @id @default(cuid())
  idProvinsi    Int?
  idKabkot      Int?
  idKecamatan   Int?
  idKelurahan   Int?
  description   String         @db.Text
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  AreaProvinsi  AreaProvinsi?  @relation(fields: [idProvinsi], references: [id])
  AreaKabkot    AreaKabkot?    @relation(fields: [idKabkot], references: [id])
  AreaKecamatan AreaKecamatan? @relation(fields: [idKecamatan], references: [id])
  AreaKelurahan AreaKelurahan? @relation(fields: [idKelurahan], references: [id])
}

model Candidate {
  id                Int                @id @default(autoincrement())
  idProvinsi        Int
  idKabkot          Int
  tingkat           Int                @default(1) //1: tingkat prov, 2: tingkat kabkot
  name              String
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  AreaProvinsi      AreaProvinsi       @relation(fields: [idProvinsi], references: [id])
  AreaKabkot        AreaKabkot         @relation(fields: [idKabkot], references: [id])
  MlAi              MlAi[]
  Swot              Swot[]
  Step              Step[]
  CandidateEmotion  CandidateEmotion[]
  CandidatePairing  CandidatePairing[] @relation("C1ToCandidate")
  Candidate2Pairing CandidatePairing[] @relation("C2ToCandidate")
}

model MlAi {
  id          Int       @id @default(autoincrement())
  idCandidate Int
  category    String?
  content     String    @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Candidate   Candidate @relation(fields: [idCandidate], references: [id])
}

model Swot {
  id          Int       @id @default(autoincrement())
  idCandidate Int
  category    String //social, weakness dll
  content     String    @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Candidate   Candidate @relation(fields: [idCandidate], references: [id])
}

model Step {
  id          Int       @id @default(autoincrement())
  idCandidate Int
  category    String //tecnology, economi dll
  sentiment   Int       @default(1) //1: positive, 2: negative
  content     String    @db.Text
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Candidate   Candidate @relation(fields: [idCandidate], references: [id])
}

model Audience {
  id            Int            @id @default(autoincrement())
  idProvinsi    Int?
  idKabkot      Int?
  idKecamatan   Int?
  idKelurahan   Int?
  value         Int
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  AreaProvinsi  AreaProvinsi?  @relation(fields: [idProvinsi], references: [id])
  AreaKabkot    AreaKabkot?    @relation(fields: [idKabkot], references: [id])
  AreaKecamatan AreaKecamatan? @relation(fields: [idKecamatan], references: [id])
  AreaKelurahan AreaKelurahan? @relation(fields: [idKelurahan], references: [id])
}

model CandidateEmotion {
  id            String         @id @default(cuid())
  idProvinsi    Int?
  idKabkot      Int?
  idKecamatan   Int?
  idKelurahan   Int?
  idCandidate   Int
  dateEmotion   DateTime       @db.Date
  confidence    Int
  supportive    Int
  positive      Int
  undecided     Int
  unsupportive  Int
  uncomfortable Int
  negative      Int
  dissapproval  Int
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  AreaProvinsi  AreaProvinsi?  @relation(fields: [idProvinsi], references: [id])
  AreaKabkot    AreaKabkot?    @relation(fields: [idKabkot], references: [id])
  AreaKecamatan AreaKecamatan? @relation(fields: [idKecamatan], references: [id])
  AreaKelurahan AreaKelurahan? @relation(fields: [idKelurahan], references: [id])
  Candidate     Candidate      @relation(fields: [idCandidate], references: [id])
}

model CandidatePairing {
  id            String         @id @default(cuid())
  idCandidate1  Int
  idCandidate2  Int
  idProvinsi    Int?
  idKabkot      Int?
  idKecamatan   Int?
  rate          Decimal
  dateEmotion   DateTime       @db.Date
  confidence    Int
  supportive    Int
  positive      Int
  undecided     Int
  unsupportive  Int
  uncomfortable Int
  negative      Int
  dissapproval  Int
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  AreaProvinsi  AreaProvinsi?  @relation(fields: [idProvinsi], references: [id])
  AreaKabkot    AreaKabkot?    @relation(fields: [idKabkot], references: [id])
  AreaKecamatan AreaKecamatan? @relation(fields: [idKecamatan], references: [id])
  Candidate1    Candidate      @relation("C1ToCandidate", fields: [idCandidate1], references: [id], map: "Candidate1Map")
  Candidate2    Candidate      @relation("C2ToCandidate", fields: [idCandidate2], references: [id], map: "Candidate2Map")
}
